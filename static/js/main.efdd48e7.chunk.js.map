{"version":3,"sources":["App.js","serviceWorker.js","store/store.js","index.js"],"names":["App","state","messageInput","userName","userEmail","userPass","userSignInEmail","userSignInPass","messages","users","currentUser","chatBoxes","handleChange","ev","_this","setState","Object","defineProperty","target","name","value","handleSignUp","preventDefault","firebase","auth","createUserWithEmailAndPassword","then","snap","userUid","user","uid","userData","email","isActive","database","ref","concat","set","console","log","catch","error","handleSignIn","signInWithEmailAndPassword","handleSubmit","data","details","senderId","receiverId","message","senderName","push","handleOpenChat","u","indexOf","prevState","toConsumableArray","handleChatBoxClose","id","list","position","splice","insertChatBox","react_default","a","createElement","key","onSubmit","htmlFor","type","onChange","map","i","onClick","handleLogOut","signOut","_this2","this","on","val","values","onAuthStateChanged","filter","x","_this3","entries","length","className","chatBox","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createStore","combineReducers","applyMiddleware","thunk","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","es","store","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8NAqQeA,6MA/PbC,MAAQ,CACNC,aAAc,GACdC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,gBAAiB,GACjBC,eAAgB,GAChBC,SAAU,GACVC,MAAO,GACPC,YAAa,GACbC,UAAW,MAGbC,aAAe,SAACC,GACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGH,EAAGK,OAAOC,KAAON,EAAGK,OAAOE,WAIhCC,aAAe,SAACR,GACdA,EAAGS,iBAEHC,IAASC,OAAOC,+BAA+BX,EAAKb,MAAMG,UAAWU,EAAKb,MAAMI,UAC7EqB,KAAK,SAAAC,GAEJ,IAAIC,EAAUD,EAAKE,KAAKC,IAKpBC,EAAW,CAAEH,UAASzB,SAJXW,EAAKb,MAAME,SAIUC,UAHpBuB,EAAKE,KAAKG,MAGqBC,UAFhC,GAIfV,IAASW,WAAWC,IAApB,SAAAC,OAAiCR,IAAWS,IAAIN,GAC7CL,KAAK,WAEJZ,EAAKC,SAAS,CACZZ,SAAU,GACVC,UAAW,GACXC,SAAU,KAGZiC,QAAQC,IAAI,mCAEbC,MAAM,WACLF,QAAQC,IAAI,qCAGjBC,MAAM,SAAAC,GACLH,QAAQC,IAAIE,QAIlBC,aAAe,SAAC7B,GACdA,EAAGS,iBAEHC,IAASC,OAAOmB,2BAA2B7B,EAAKb,MAAMK,gBAAiBQ,EAAKb,MAAMM,gBAC/EmB,KAAK,SAAAC,GACJb,EAAKC,SAAS,CACZT,gBAAiB,GACjBC,eAAgB,OAGnBiC,MAAM,SAAAC,GACLH,QAAQC,IAAIE,QA4BlBG,aAAe,SAACC,EAAMhC,GAEpBA,EAAGS,iBAEH,IAAIwB,EAAU,CACZC,SAAUjC,EAAKb,MAAMS,YAAYkB,QACjCoB,WAAYH,EAAKjB,QACjBqB,QAASnC,EAAKb,MAAMC,aACpBgD,WAAYpC,EAAKb,MAAMS,YAAYP,UAGrCoB,IAASW,WAAWC,IAAI,YAAYgB,KAAKL,GACtCpB,KAAK,SAAAC,GACJb,EAAKC,SAAS,CACZb,aAAc,OAGjBsC,MAAM,SAAAC,GACLH,QAAQC,IAAIE,QAIlBW,eAAiB,SAACC,IAEyB,IAArCvC,EAAKb,MAAMU,UAAU2C,QAAQD,IAC/BvC,EAAKC,SAAS,SAAAwC,GAAS,MAAK,CAC1B5C,UAAS,GAAAyB,OAAApB,OAAAwC,EAAA,EAAAxC,CAAMuC,EAAU5C,WAAhB,CAA2B0C,UAK1CI,mBAAqB,SAACC,GACpB,IAAIC,EAAO7C,EAAKb,MAAMU,UAClBiD,EAAWD,EAAKL,QAAQI,GAC5BC,EAAKE,OAAOD,EAAU,GAEtB9C,EAAKC,SAAS,CACZJ,UAAWgD,OAIfG,cAAgB,SAACjB,GAAS,IAElBrC,EAAaM,EAAKb,MAAlBO,SAEN,OACEuD,EAAAC,EAAAC,cAAA,OAAKP,GAAG,UAAUQ,IAAKrB,EAAKjB,SAE1BmC,EAAAC,EAAAC,cAAA,gCAAwBpB,EAAK1C,UAE7B4D,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,QAAME,SAAU,SAACtD,GAAD,OAAQC,EAAK8B,aAAaC,EAAMhC,KAC9CkD,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,gBAAf,aACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOX,GAAG,eAAevC,KAAK,eAAeC,MAAON,EAAKb,MAAMC,aAAcoE,SAAUxD,EAAKF,eAExGmD,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,SAGFN,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAEIzD,EAAS+D,IAAI,SAACtB,EAASuB,GACrB,OACET,EAAAC,EAAAC,cAAA,MAAIC,IAAKM,GAAT,GAAApC,OAAgBa,EAAQA,QAAxB,SAAAb,OAAuCa,EAAQC,iBAOzDa,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAAM3D,EAAK2C,mBAAmBZ,KAA/C,sBAKN6B,aAAe,WACbnD,IAASC,OAAOmD,UACbjD,KAAK,WACJH,IAASW,WAAWC,IAApB,SAAAC,OAAiCtB,EAAKb,MAAMS,YAAYkB,QAAxD,cAA4ES,KAAI,yFAzGlE,IAAAuC,EAAAC,KAElBtD,IAASW,WAAWC,IAAI,KAAK2C,GAAG,QAAS,SAAAnD,GACvC,IAAIkB,EAAsB,OAAflB,EAAKoD,MAAiB,GAAKpD,EAAKoD,MAEvCtE,EAAQoC,EAAKpC,MAAQO,OAAOgE,OAAOnC,EAAKpC,OAAS,GACjDD,EAAWqC,EAAKrC,SAAWQ,OAAOgE,OAAOnC,EAAKrC,UAAY,GAC9DoE,EAAK7D,SAAS,CAAEN,QAAOD,aAEvBe,IAASC,OAAOyD,mBAAmB,SAAApD,GAC7BA,EACFN,IAASW,WAAWC,IAApB,SAAAC,OAAiCP,EAAKC,IAAtC,cAAsDO,KAAI,GACvDX,KAAK,WACJ,IAAIhB,EAAckE,EAAK3E,MAAMQ,MAAMyE,OAAO,SAAAC,GAAC,OAAIA,EAAEvD,UAAYC,EAAKC,MAClE8C,EAAK7D,SAAS,CAAEL,YAAaA,EAAY,OAI7CkE,EAAK7D,SAAS,CAAEL,YAAa,0CA2F5B,IAAA0E,EAAAP,KAEHpE,EAAQ,GAE0C,IAAlDO,OAAOqE,QAAQR,KAAK5E,MAAMS,aAAa4E,SACzC7E,EAAQoE,KAAK5E,MAAMQ,MAAMyE,OAAO,SAAArD,GAAI,OAAIA,EAAKD,UAAYwD,EAAKnF,MAAMS,YAAYkB,WAGlF,IAAIjB,EAAYK,OAAOgE,OAAOH,KAAK5E,MAAMU,WAEzC,OACEoD,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OAGuC,IAAlDvE,OAAOqE,QAAQR,KAAK5E,MAAMS,aAAa4E,OACrCvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BAAmBY,KAAK5E,MAAMS,YAAYP,UAC1C4D,EAAAC,EAAAC,cAAA,UAAQQ,QAASI,KAAKH,cAAtB,YAEA,iBAGNX,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAEIxD,EAAM8D,IAAI,SAAC1C,GACT,OACEkC,EAAAC,EAAAC,cAAA,MAAIC,IAAKrC,EAAKD,QAAS6C,QAAS,kBAAMW,EAAKhC,eAAevB,KAA1D,GAAAO,OAAqEP,EAAK1B,SAA1E,MAAAiC,OAAuFP,EAAKI,SAAW,SAAW,UAAlH,SAMR8B,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,QAAMP,GAAG,eAAeS,SAAUU,KAAKxD,cACrC0C,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,YAAf,UACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOX,GAAG,WAAWvC,KAAK,WAAWC,MAAOyD,KAAK5E,MAAME,SAAUmE,SAAUO,KAAKjE,eAE5FmD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,aAAf,WACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOX,GAAG,YAAYvC,KAAK,YAAYC,MAAOyD,KAAK5E,MAAMG,UAAWkE,SAAUO,KAAKjE,eAE/FmD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,YAAf,cACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWX,GAAG,WAAWvC,KAAK,WAAWC,MAAOyD,KAAK5E,MAAMI,SAAUiE,SAAUO,KAAKjE,eAEhGmD,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASkB,UAAU,cAAhC,YAGFxB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,QAAMP,GAAG,eAAeS,SAAUU,KAAKnC,cAErCqB,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,mBAAf,WACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOX,GAAG,kBAAkBvC,KAAK,kBAAkBC,MAAOyD,KAAK5E,MAAMK,gBAAiBgE,SAAUO,KAAKjE,eAEjHmD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,kBAAf,cACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWX,GAAG,iBAAiBvC,KAAK,iBAAiBC,MAAOyD,KAAK5E,MAAMM,eAAgB+D,SAAUO,KAAKjE,eAElHmD,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASkB,UAAU,cAAhC,YAGFxB,EAAAC,EAAAC,cAAA,WAGEtD,EAAU4D,IAAI,SAACiB,EAAShB,GAAV,OAAgBY,EAAKtB,cAAc0B,EAAShB,aAzPlDiB,aCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTvE,KAAK,SAAA4E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvG,QACfkG,UAAUC,cAAcO,YAI1BrE,QAAQC,IACN,gHAKE2D,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBhE,QAAQC,IAAI,sCAGR2D,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5B9D,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,yCC3FlDqE,cAAYC,YAFP,IAEqC,GAAIC,YAAgBC,MCa7E1F,gBARa,CACT2F,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,iBAIvBC,IAASC,OACL1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAUC,MAAOA,GACb5D,EAAAC,EAAAC,cAAC2D,EAAD,OAEJC,SAASC,eAAe,SFFrB,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,iCAAwBpC,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,OAAQ,WAC9B,IAAMlC,EAAK,GAAA7D,OAAM4F,iCAAN,sBAEPtC,GAgEV,SAAiCO,EAAOC,GAEtCkC,MAAMnC,GACHvE,KAAK,SAAA2G,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYhF,QAAQ,cAG5C6C,UAAUC,cAAcsC,MAAMhH,KAAK,SAAA4E,GACjCA,EAAaqC,aAAajH,KAAK,WAC7BkE,OAAOC,SAAS+C,aAKpB5C,EAAgBC,EAAOC,KAG1B1D,MAAM,WACLF,QAAQC,IACN,mEArFAsG,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMhH,KAAK,WACjCY,QAAQC,IACN,+GAMJyD,EAAgBC,EAAOC,MEpB/BE","file":"static/js/main.efdd48e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"firebase/app\";\n\nclass App extends Component {\n\n  state = {\n    messageInput: \"\",\n    userName: \"\",\n    userEmail: \"\",\n    userPass: \"\",\n    userSignInEmail: \"\",\n    userSignInPass: \"\",\n    messages: [],\n    users: [],\n    currentUser: {},\n    chatBoxes: [],\n  }\n\n  handleChange = (ev) => {\n    this.setState({\n      [ev.target.name]: ev.target.value\n    })\n  }\n\n  handleSignUp = (ev) => {\n    ev.preventDefault();\n\n    firebase.auth().createUserWithEmailAndPassword(this.state.userEmail, this.state.userPass)\n      .then(snap => {\n\n        let userUid = snap.user.uid;\n        let userName = this.state.userName;\n        let userEmail = snap.user.email;\n        let isActive = false;\n\n        let userData = { userUid, userName, userEmail, isActive }\n\n        firebase.database().ref(`users/${userUid}`).set(userData)\n          .then(() => {\n\n            this.setState({\n              userName: \"\",\n              userEmail: \"\",\n              userPass: \"\"\n            })\n\n            console.log(\"Success: Data Set Successful!\")\n          })\n          .catch(() => {\n            console.log(\"Error: Data Set Unsuccessful!\")\n          })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  handleSignIn = (ev) => {\n    ev.preventDefault();\n\n    firebase.auth().signInWithEmailAndPassword(this.state.userSignInEmail, this.state.userSignInPass)\n      .then(snap => {\n        this.setState({\n          userSignInEmail: \"\",\n          userSignInPass: \"\"\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  componentDidMount() {\n\n    firebase.database().ref('/').on(\"value\", snap => {\n      let data = snap.val() === null ? {} : snap.val()\n\n      let users = data.users ? Object.values(data.users) : [];\n      let messages = data.messages ? Object.values(data.messages) : [];\n      this.setState({ users, messages })\n\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          firebase.database().ref(`users/${user.uid}/isActive`).set(true)\n            .then(() => {\n              let currentUser = this.state.users.filter(x => x.userUid === user.uid);\n              this.setState({ currentUser: currentUser[0] })\n            })\n        }\n        else {\n          this.setState({ currentUser: {} })\n        }\n      })\n    })\n  }\n\n  handleSubmit = (data, ev) => {\n\n    ev.preventDefault();\n\n    let details = {\n      senderId: this.state.currentUser.userUid,\n      receiverId: data.userUid,\n      message: this.state.messageInput,\n      senderName: this.state.currentUser.userName\n    }\n\n    firebase.database().ref(\"messages\").push(details)\n      .then(snap => {\n        this.setState({\n          messageInput: \"\"\n        })\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  handleOpenChat = (u) => {\n\n    if (this.state.chatBoxes.indexOf(u) === -1) {\n      this.setState(prevState => ({\n        chatBoxes: [...prevState.chatBoxes, u]\n      }))\n    }\n  }\n\n  handleChatBoxClose = (id) => {\n    let list = this.state.chatBoxes;\n    let position = list.indexOf(id);\n    list.splice(position, 1);\n\n    this.setState({\n      chatBoxes: list\n    })\n  }\n\n  insertChatBox = (data) => {\n\n    let { messages } = this.state;\n\n    return (\n      <div id=\"content\" key={data.userUid}>\n\n        <h3>Chat started with: {data.userName}</h3>\n\n        <hr />\n\n        <form onSubmit={(ev) => this.handleSubmit(data, ev)}>\n          <label htmlFor=\"messageInput\">Message: </label>\n          <input type=\"text\" id=\"messageInput\" name=\"messageInput\" value={this.state.messageInput} onChange={this.handleChange} />\n\n          <button type=\"submit\">Send</button>\n        </form>\n\n        <h4>Messages:</h4>\n\n        <div>\n          <ul>\n            {\n              messages.map((message, i) => {\n                return (\n                  <li key={i}>{`${message.message} <== ${message.senderName}`}</li>\n                )\n              })\n            }\n          </ul>\n        </div>\n\n        <button onClick={() => this.handleChatBoxClose(data)}>Close Chat Box</button>\n      </div>\n    )\n  }\n\n  handleLogOut = () => {\n    firebase.auth().signOut()\n      .then(() => {\n        firebase.database().ref(`users/${this.state.currentUser.userUid}/isActive`).set(false)\n      })\n  }\n\n  render() {\n\n    let users = [];\n\n    if (Object.entries(this.state.currentUser).length !== 0) {\n      users = this.state.users.filter(user => user.userUid !== this.state.currentUser.userUid);\n    }\n\n    let chatBoxes = Object.values(this.state.chatBoxes);\n\n    return (\n      <div className=\"App\">\n\n        {\n          Object.entries(this.state.currentUser).length !== 0 ? (\n            <div>\n              <h3>Current User: {this.state.currentUser.userName}</h3>\n              <button onClick={this.handleLogOut}>Log Out</button>\n            </div>\n          ) : \"Please Sign In\"\n        }\n\n        <hr />\n\n        <ul>\n          {\n            users.map((user) => {\n              return (\n                <li key={user.userUid} onClick={() => this.handleOpenChat(user)}>{`${user.userName} (${user.isActive ? \"Online\" : \"Offline\"})`}</li>\n              )\n            })\n          }\n        </ul>\n\n        <hr />\n\n        <form id=\"sign-up-form\" onSubmit={this.handleSignUp}>\n          <label htmlFor=\"userName\">Name: </label>\n          <input type=\"text\" id=\"userName\" name=\"userName\" value={this.state.userName} onChange={this.handleChange} />\n\n          <br />\n\n          <label htmlFor=\"userEmail\">Email: </label>\n          <input type=\"text\" id=\"userEmail\" name=\"userEmail\" value={this.state.userEmail} onChange={this.handleChange} />\n\n          <br />\n\n          <label htmlFor=\"userPass\">Password: </label>\n          <input type=\"password\" id=\"userPass\" name=\"userPass\" value={this.state.userPass} onChange={this.handleChange} />\n\n          <button type=\"submit\" className=\"submit-btn\">Sign Up</button>\n        </form>\n\n        <hr />\n\n        <form id=\"sign-in-form\" onSubmit={this.handleSignIn}>\n\n          <label htmlFor=\"userSignInEmail\">Email: </label>\n          <input type=\"text\" id=\"userSignInEmail\" name=\"userSignInEmail\" value={this.state.userSignInEmail} onChange={this.handleChange} />\n\n          <br />\n\n          <label htmlFor=\"userSignInPass\">Password: </label>\n          <input type=\"password\" id=\"userSignInPass\" name=\"userSignInPass\" value={this.state.userSignInPass} onChange={this.handleChange} />\n\n          <button type=\"submit\" className=\"submit-btn\">Sign In</button>\n        </form>\n\n        <hr />\n\n        {\n          chatBoxes.map((chatBox, i) => this.insertChatBox(chatBox, i))\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst AllReducers = {};\r\n\r\nexport default createStore(combineReducers(AllReducers), {}, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\n// Initialize Firebase\nvar config = {\n    apiKey: \"AIzaSyAv71-5itSOzD_bYlMA7am1tK5PW2hmIVs\",\n    authDomain: \"amlakhani-chatapp.firebaseapp.com\",\n    databaseURL: \"https://amlakhani-chatapp.firebaseio.com\",\n    projectId: \"amlakhani-chatapp\",\n    storageBucket: \"amlakhani-chatapp.appspot.com\",\n    messagingSenderId: \"451241892358\"\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}