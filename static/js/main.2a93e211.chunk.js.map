{"version":3,"sources":["store/ActionTypes.js","store/actions/userSignOut.js","components/header.js","store/actions/clearChatBoxes.js","components/usersList.js","store/actions/insertChatBox.js","components/inputField.js","store/actions/userSignUp.js","containers/signUpForm.js","store/actions/userSignIn.js","containers/signInForm.js","store/actions/sendMessage.js","components/chatBox.js","store/actions/closeChatBox.js","App.js","store/actions/updateCurrentUser.js","store/actions/updateUsersList.js","store/actions/updateMessagesList.js","serviceWorker.js","store/reducers/currentUser.js","store/reducers/usersList.js","store/reducers/messagesList.js","store/reducers/signUpStatus.js","store/reducers/signInStatus.js","store/reducers/signOutStatus.js","store/reducers/sendMessageStatus.js","store/store.js","store/reducers/chatBoxesList.js","index.js"],"names":["ActionTypes","USER_SIGN_IN","USER_SIGN_OUT","USER_SIGN_UP_SUCCESS","USER_SIGN_UP_FAILED","USER_SIGN_IN_SUCCESS","USER_SIGN_IN_FAILED","USER_SIGN_OUT_SUCCESS","USER_SIGN_OUT_FAILED","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_FAILED","UPDATE_CURRENT_USER","UPDATE_USERS_LIST","UPDATE_MESSAGES_LIST","INSERT_CHAT_BOX","CLOSE_CHAT_BOX","CLEAR_CHAT_BOXES","SHOW_LOADER","HIDE_LOADER","SHOW_ERROR","HIDE_ERROR","SHOW_CONGRTATS","HIDE_CONGRTATS","signOutUser","id","dispatch","firebase","auth","signOut","then","_","database","ref","concat","set","type","payload","catch","err","success","signOutError","Header","handleLogOut","_this","props","currentUser","userUid","prevProps","this","signOutSuccessStatus","clearChatBoxes","react_default","a","createElement","Object","entries","length","userName","onClick","Component","connect","state","data","signOutStatus","error","users","usersList","chatBoxes","chatBoxesList","insertChatBox","filter","user","className","map","key","u","hasOwnProperty","isActive","InputField","name","value","onChange","e","handleOnChange","InputMessageField","React","forwardRef","defaultValue","makeNewUser","email","pass","createUserWithEmailAndPassword","snap","uid","userData","userEmail","signUpError","SignUpForm","userPass","handleChange","ev","setState","defineProperty","target","handleSignUp","preventDefault","signUpSuccessStatus","onSubmit","htmlFor","inputField_InputField","signUpStatus","signInUser","signInWithEmailAndPassword","signInError","SignInForm","userSignInEmail","userSignInPass","handleSignIn","signInSuccessStatus","signInStatus","sendMessage","push","sendMessageError","ChatBox","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","message","textInput","current","details","senderId","receiverId","senderName","handleChatBoxClose","list","closeChatBox","createRef","sendMessageSuccessStatus","_this2","_this$props","messages","messagesList","i","sendMessageStatus","App","on","val","values","updateUsersList","updateMessagesList","onAuthStateChanged","x","updateCurrentUser","header","signUpForm","signInForm","chatBox","components_chatBox","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","arguments","undefined","action","userList","AllReducers","objectSpread","createStore","combineReducers","applyMiddleware","thunk","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","es","store","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iNAyBeA,EAzBK,CAChBC,aAAc,eACdC,cAAe,gBACfC,qBAAsB,uBACtBC,oBAAqB,sBACrBC,qBAAsB,uBACtBC,oBAAqB,sBACrBC,sBAAuB,wBACvBC,qBAAsB,uBACtBC,qBAAsB,uBACtBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,kBAAmB,oBACnBC,qBAAsB,uBACtBC,gBAAiB,kBACjBC,eAAgB,iBAChBC,iBAAkB,mBAClBC,YAAa,cACbC,YAAa,cACbC,WAAY,aACZC,WAAY,aACZC,eAAgB,iBAChBC,eAAgB,kBClBb,SAASC,EAAYC,GAC1B,OAAO,SAAAC,GACLC,IACGC,OACAC,UACAC,KAAK,SAAAC,GACJJ,IACGK,WACAC,IAFH,SAAAC,OAEgBT,EAFhB,cAGGU,KAAI,GACJL,KAAK,SAAAC,GACJL,EAUH,CACLU,KAAMnC,EAAYO,sBAClB6B,SAAS,QATNC,MAAM,SAAAC,GACLb,EAYR,SAAsBa,GACpB,MAAO,CACLH,KAAMnC,EAAYQ,qBAClB4B,QAAS,CAAEG,SAAS,EAAOD,QAfdE,CAAaF,WCdxBG,6MACJC,aAAe,WACbC,EAAKC,MAAMrB,YAAYoB,EAAKC,MAAMC,YAAYC,4FAG7BC,GACbC,KAAKJ,QAAUG,GACbC,KAAKJ,MAAMK,sBACbD,KAAKJ,MAAMM,eAAe,qCAM9B,OACEC,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,mBACN2B,EAAAC,EAAAC,cAAA,UAAQ7B,GAAG,UACT2B,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,cACN2B,EAAAC,EAAAC,cAAA,6BAEiD,IAAlDC,OAAOC,QAAQP,KAAKJ,MAAMC,aAAaW,OACtCL,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,eACN2B,EAAAC,EAAAC,cAAA,UAAKL,KAAKJ,MAAMC,YAAYY,UAC5BN,EAAAC,EAAAC,cAAA,UAAQK,QAASV,KAAKN,cAAtB,YAEA,MAGNS,EAAAC,EAAAC,cAAA,mBA5BaM,aAqDNC,cAnBS,SAAAC,GACtB,MAAO,CACLhB,YAAagB,EAAMhB,YAAYiB,KAC/Bb,qBAAsBY,EAAME,cAAcxB,QAC1CC,aAAcqB,EAAME,cAAcC,QAIX,SAAAvC,GACzB,MAAO,CACLF,YAAa,SAAAC,GACXC,EAASF,EAAYC,KAEvB0B,eAAgB,SAAAY,GACdrC,ECnDC,SAAwBqC,GAC7B,MAAO,CACL3B,KAAMnC,EAAYgB,iBAClBoB,QAAS0B,GDgDEZ,CAAeY,OAKfF,CAGbnB,GEzDF,IAiDemB,cAhBS,SAAAC,GACtB,MAAO,CACLhB,YAAagB,EAAMhB,YAAYiB,KAC/BG,MAAOJ,EAAMK,UAAUJ,KACvBK,UAAWN,EAAMO,cAAcN,OAIR,SAAArC,GACzB,MAAO,CACL4C,cAAe,SAAAP,GACbrC,EC9CC,SAAuBqC,GAC5B,MAAO,CACL3B,KAAMnC,EAAYc,gBAClBsB,QAAS0B,GD2CEO,CAAcP,OAKdF,CAjDG,SAAAhB,GAChB,IAAIqB,EAAQ,GAEqC,IAA7CX,OAAOC,QAAQX,EAAMC,aAAaW,SACpCS,EAAQrB,EAAMqB,MAAMK,OAClB,SAAAC,GAAI,OAAIA,EAAKzB,UAAYF,EAAMC,YAAYC,WAU/C,OACEK,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,wBACN2B,EAAAC,EAAAC,cAAA,MAAImB,UAAU,kBAAd,cACArB,EAAAC,EAAAC,cAAA,MAAImB,UAAU,aACXP,EAAMQ,IAAI,SAAAF,GACT,OACEpB,EAAAC,EAAAC,cAAA,MAAIqB,IAAKH,EAAKzB,QAASY,QAAS,kBAZrBiB,EAY0CJ,OAXxD3B,EAAMuB,UAAUS,eAAeD,EAAE7B,UACpCF,EAAMyB,cAAcM,IAFH,IAAAA,IAYX,GAAA1C,OACEsC,EAAKd,SADP,MAAAxB,OAEKsC,EAAKM,SAAW,SAAW,UAFhC,SAON1B,EAAAC,EAAAC,cAAA,sBE9BOyB,EAAa,SAAAlC,GACxB,OACEO,EAAAC,EAAAC,cAAA,SACElB,KAAMS,EAAMT,KACZX,GAAIoB,EAAMpB,GACVuD,KAAMnC,EAAMmC,KACZC,MAAOpC,EAAMoC,MACbC,SAAU,SAAAC,GAAC,OAAItC,EAAMuC,eAAeD,OAK7BE,EAAoBC,IAAMC,WAAW,SAAC1C,EAAOZ,GACxD,OACEmB,EAAAC,EAAAC,cAAA,SACElB,KAAMS,EAAMT,KACZoD,aAAc3C,EAAM2C,aACpBvD,IAAKA,EACLR,GAAIoB,EAAMpB,OChBT,SAASgE,EAAYT,EAAMU,EAAOC,GACvC,OAAO,SAAAjE,GACLC,IACGC,OACAgE,+BAA+BF,EAAOC,GACtC7D,KAAK,SAAA+D,GACJ,IAAI9C,EAAU8C,EAAKrB,KAAKsB,IAKpBC,EAAW,CAAEhD,UAASW,SAJXsB,EAIqBgB,UAHpBH,EAAKrB,KAAKkB,MAGqBZ,UAFhC,GAIfnD,IACGK,WACAC,IAFH,SAAAC,OAEgBa,IACbZ,IAAI4D,GACJjE,KAAK,WACJJ,EAaH,CACLU,KAAMnC,EAAYG,qBAClBiC,SAAS,MAbFC,MAAM,SAAAC,GACLb,EAASuE,EAAY1D,QAG1BD,MAAM,SAAAC,GACLb,EAASuE,EAAY1D,OAY7B,SAAS0D,EAAY1D,GACnB,MAAO,CACLH,KAAMnC,EAAYI,oBAClBgC,QAAS,CAAEG,SAAS,EAAOD,YCvCzB2D,6MACJpC,MAAQ,CACNJ,SAAU,GACVsC,UAAW,GACXG,SAAU,MAGZC,aAAe,SAAAC,GACbzD,EAAK0D,SAAL/C,OAAAgD,EAAA,EAAAhD,CAAA,GACG8C,EAAGG,OAAOxB,KAAOqB,EAAGG,OAAOvB,WAIhCwB,aAAe,SAAAJ,GACbA,EAAGK,iBAEH9D,EAAKC,MAAM4C,YACT7C,EAAKkB,MAAMJ,SACXd,EAAKkB,MAAMkC,UACXpD,EAAKkB,MAAMqC,6FAIInD,GACbC,KAAKJ,QAAUG,GACbC,KAAKJ,MAAM8D,qBACb1D,KAAKqD,SAAS,CACZ5C,SAAU,GACVsC,UAAW,GACXG,SAAU,sCAOhB,OACE/C,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,gBACN2B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,QAAM7B,GAAG,eAAemF,SAAU3D,KAAKwD,cACrCrD,EAAAC,EAAAC,cAAA,SAAOuD,QAAQ,YAAf,UACAzD,EAAAC,EAAAC,cAACwD,EAAD,CACE1E,KAAK,OACLX,GAAG,WACHuD,KAAK,WACLC,MAAOhC,KAAKa,MAAMJ,SAClB0B,eAAgBnC,KAAKmD,eAGvBhD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOuD,QAAQ,aAAf,WACAzD,EAAAC,EAAAC,cAACwD,EAAD,CACE1E,KAAK,OACLX,GAAG,YACHuD,KAAK,YACLC,MAAOhC,KAAKa,MAAMkC,UAClBZ,eAAgBnC,KAAKmD,eAGvBhD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOuD,QAAQ,YAAf,cACAzD,EAAAC,EAAAC,cAACwD,EAAD,CACE1E,KAAK,WACLX,GAAG,WACHuD,KAAK,WACLC,MAAOhC,KAAKa,MAAMqC,SAClBf,eAAgBnC,KAAKmD,eAGvBhD,EAAAC,EAAAC,cAAA,UAAQlB,KAAK,SAASqC,UAAU,cAAhC,oBAvEeb,aA+FVC,cAfS,SAAAC,GACtB,MAAO,CACL6C,oBAAqB7C,EAAMiD,aAAavE,QACxCyD,YAAanC,EAAMiD,aAAa9C,QAIT,SAAAvC,GACzB,MAAO,CACL+D,YAAa,SAACT,EAAMU,EAAOC,GACzBjE,EAAS+D,EAAYT,EAAMU,EAAOC,OAKzB9B,CAGbqC,GCnGK,SAASc,EAAWtB,EAAOC,GAChC,OAAO,SAAAjE,GACLC,IACGC,OACAqF,2BAA2BvB,EAAOC,GAClC7D,KAAM,SAAAC,GACLL,EASC,CACLU,KAAMnC,EAAYK,qBAClB+B,SAAS,MATNC,MAAM,SAAAC,GACLb,EAYR,SAAqBa,GACnB,MAAO,CACLH,KAAMnC,EAAYM,oBAClB8B,QAAS,CAAEG,SAAS,EAAOD,QAfd2E,CAAY3E,WCRvB4E,6MACJrD,MAAQ,CACNsD,gBAAiB,GACjBC,eAAgB,MAGlBjB,aAAe,SAAAC,GACbzD,EAAK0D,SAAL/C,OAAAgD,EAAA,EAAAhD,CAAA,GACG8C,EAAGG,OAAOxB,KAAOqB,EAAGG,OAAOvB,WAIhCqC,aAAe,SAAAjB,GACbA,EAAGK,iBAEH9D,EAAKC,MAAMmE,WACTpE,EAAKkB,MAAMsD,gBACXxE,EAAKkB,MAAMuD,mGAIIrE,GACbC,KAAKJ,QAAUG,GACbC,KAAKJ,MAAM0E,qBACbtE,KAAKqD,SAAS,CACZc,gBAAiB,GACjBC,eAAgB,sCAOtB,OACEjE,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,gBACN2B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,QAAM7B,GAAG,eAAemF,SAAU3D,KAAKqE,cACrClE,EAAAC,EAAAC,cAAA,SAAOuD,QAAQ,mBAAf,WACAzD,EAAAC,EAAAC,cAACwD,EAAD,CACE1E,KAAK,OACLX,GAAG,kBACHuD,KAAK,kBACLC,MAAOhC,KAAKa,MAAMsD,gBAClBhC,eAAgBnC,KAAKmD,eAGvBhD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOuD,QAAQ,kBAAf,cACAzD,EAAAC,EAAAC,cAACwD,EAAD,CACE1E,KAAK,WACLX,GAAG,iBACHuD,KAAK,iBACLC,MAAOhC,KAAKa,MAAMuD,eAClBjC,eAAgBnC,KAAKmD,eAGvBhD,EAAAC,EAAAC,cAAA,UAAQlB,KAAK,SAASqC,UAAU,cAAhC,oBAzDeb,aAiFVC,cAfS,SAAAC,GACtB,MAAO,CACLyD,oBAAqBzD,EAAM0D,aAAahF,QACxC0E,YAAapD,EAAM0D,aAAavD,QAIT,SAAAvC,GACzB,MAAO,CACLsF,WAAY,SAACtB,EAAOC,GAClBjE,EAASsF,EAAWtB,EAAOC,OAKlB9B,CAGbsD,GCrFK,SAASM,EAAY1D,GAC1B,OAAO,SAAArC,GACLC,IACGK,WACAC,IAAI,YACJyF,KAAK3D,GACLjC,KAAK,SAAAC,GACJL,EASC,CACLU,KAAMnC,EAAYS,qBAClB2B,SAAS,MATNC,MAAM,SAAAC,GACLb,EAYR,SAA0Ba,GACxB,MAAO,CACLH,KAAMnC,EAAYU,oBAClB0B,QAAS,CAAEG,SAAS,EAAOD,QAfdoF,CAAiBpF,WCR5BqF,cACJ,SAAAA,EAAY/E,GAAO,IAAAD,EAAA,OAAAW,OAAAsE,EAAA,EAAAtE,CAAAN,KAAA2E,IACjBhF,EAAAW,OAAAuE,EAAA,EAAAvE,CAAAN,KAAAM,OAAAwE,EAAA,EAAAxE,CAAAqE,GAAAI,KAAA/E,KAAMJ,KAaRoF,aAAe,SAAClE,EAAMsC,GACpBA,EAAGK,iBAEH,IAAIwB,EAAUtF,EAAKuF,UAAUC,QAAQnD,MAErC,GAAgB,KAAZiD,EAAgB,CAClB,IAAIG,EAAU,CACZC,SAAU1F,EAAKC,MAAMC,YAAYC,QACjCwF,WAAYxE,EAAKhB,QACjBmF,UACAM,WAAY5F,EAAKC,MAAMC,YAAYY,UAGrCd,EAAKC,MAAM4E,YAAYY,KA3BRzF,EA+BnB6F,mBAAqB,SAAAhH,GACnB,IAAIiH,EAAO9F,EAAKC,MAAMuB,iBACfsE,EAAKjH,EAAGsB,SAEfH,EAAKC,MAAM8F,aAAaD,IAhCxB9F,EAAKuF,UAAY7C,IAAMsD,YAHNhG,kFAMAI,GACbC,KAAKJ,QAAUG,GACbC,KAAKJ,MAAMgG,2BACb5F,KAAKkF,UAAUC,QAAQnD,MAAQ,qCA6B5B,IAAA6D,EAAA7F,KAAA8F,EAEkB9F,KAAKJ,MAAxBmG,EAFCD,EAEDC,SAAUjF,EAFTgF,EAEShF,KAEZkF,EAAeD,EAASzE,OAC1B,SAAA2D,GAAO,OACJA,EAAQI,WAAavE,EAAKhB,SACzBmF,EAAQK,aAAeO,EAAKjG,MAAMC,YAAYC,SAC/CmF,EAAQI,WAAaQ,EAAKjG,MAAMC,YAAYC,SAC3CmF,EAAQK,aAAexE,EAAKhB,UAGlC,OACEK,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,UAAUkD,IAAK1B,KAAKJ,MAAM8B,KAChCvB,EAAAC,EAAAC,cAAA,gCAAwBS,EAAKL,UAE7BN,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,QAAMsD,SAAU,SAAAP,GAAE,OAAIyC,EAAKb,aAAalE,EAAMsC,KAC5CjD,EAAAC,EAAAC,cAAA,SAAOuD,QAAQ,gBAAf,aACAzD,EAAAC,EAAAC,cAAC+B,EAAD,CACEjD,KAAK,OACLoD,aAAa,GACbvD,IAAKgB,KAAKkF,UACV1G,GAAE,eAAAS,OAAiB6B,EAAKhB,WAG1BK,EAAAC,EAAAC,cAAA,UAAQlB,KAAK,UAAb,SAGFgB,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACG2F,EAAavE,IAAI,SAACwD,EAASgB,GAC1B,OACE9F,EAAAC,EAAAC,cAAA,MAAIqB,IAAKuE,GAAT,GAAAhH,OAAgBgG,EAAQA,QAAxB,SAAAhG,OACEgG,EAAQM,aAAeM,EAAKjG,MAAMC,YAAYY,SAC1C,MACAwE,EAAQM,iBAOtBpF,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAMmF,EAAKL,mBAAmB1E,KAA/C,0BArFcH,aAkHPC,cArBS,SAAAC,GACtB,MAAO,CACLhB,YAAagB,EAAMhB,YAAYiB,KAC/BiF,SAAUlF,EAAMmF,aAAalF,KAC7B8E,yBAA0B/E,EAAMqF,kBAAkB3G,QAClDmF,iBAAkB7D,EAAMqF,kBAAkBlF,MAC1CG,UAAWN,EAAMO,cAAcN,OAIR,SAAArC,GACzB,MAAO,CACL+F,YAAa,SAAA1D,GACXrC,EAAS+F,EAAY1D,KAEvB4E,aAAc,SAAA5E,GChHX,IAAsBtC,EDiHvBC,GCjHuBD,EDiHDsC,EChHnB,CACL3B,KAAMnC,EAAYe,eAClBqB,QAASZ,QDmHEoC,CAA6C+D,GE3GtDwB,8LACgB,IAAAxG,EAAAK,KAClBtB,IACGK,WACAC,IAAI,KACJoH,GAAG,QAAS,SAAAxD,GACX,IAAI9B,EAAsB,OAAf8B,EAAKyD,MAAiB,GAAKzD,EAAKyD,MAEvCpF,EAAQH,EAAKG,MAAQX,OAAOgG,OAAOxF,EAAKG,OAAS,GACjD8E,EAAWjF,EAAKiF,SAAWzF,OAAOgG,OAAOxF,EAAKiF,UAAY,GAC9DpG,EAAKC,MAAM2G,gBAAgBtF,GAC3BtB,EAAKC,MAAM4G,mBAAmBT,GAE9BrH,IAASC,OAAO8H,mBAAmB,SAAAlF,GAC7BA,EACF7C,IACGK,WACAC,IAFH,SAAAC,OAEgBsC,EAAKsB,IAFrB,cAGG3D,KAAI,GACJL,KAAK,WACJ,IAAIgB,EAAcF,EAAKC,MAAMqB,MAAMK,OACjC,SAAAoF,GAAC,OAAIA,EAAE5G,UAAYyB,EAAKsB,MAE1BlD,EAAKC,MAAM+G,kBAAkB9G,EAAY,MAG7CF,EAAKC,MAAM+G,kBAAkB,yCAOrC,OACExG,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACuG,EAAD,MAEmD,IAAlDtG,OAAOC,QAAQP,KAAKJ,MAAMC,aAAaW,OACtCL,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,mBACN2B,EAAAC,EAAAC,cAACwG,EAAD,MAEA1G,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACyG,EAAD,OAGA,KAE+C,IAAlDxG,OAAOC,QAAQP,KAAKJ,MAAMC,aAAaW,OACtCL,EAAAC,EAAAC,cAACa,EAAD,MACE,KAEJf,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,qBACZlB,OAAOgG,OAAOtG,KAAKJ,MAAMuB,WAAWM,IAAI,SAAAsF,GAAO,OAC9C5G,EAAAC,EAAAC,cAAC2G,EAAD,CAASlG,KAAMiG,EAASrF,IAAKqF,EAAQjH,qBAtD/Ba,aAoFHC,cAtBS,SAAAC,GACtB,MAAO,CACLhB,YAAagB,EAAMhB,YAAYiB,KAC/BG,MAAOJ,EAAMK,UAAUJ,KACvBK,UAAWN,EAAMO,cAAcN,OAIR,SAAArC,GACzB,MAAO,CACLkI,kBAAmB,SAAA7F,GACjBrC,ECpFC,SAA2BqC,GAE9B,MAAO,CACH3B,KAAMnC,EAAYW,oBAClByB,QAAS0B,GDgFF6F,CAAkB7F,KAE7ByF,gBAAiB,SAAAzF,GACfrC,EEvFC,SAAyBqC,GAE5B,MAAO,CACH3B,KAAMnC,EAAYY,kBAClBwB,QAAS0B,GFmFFyF,CAAgBzF,KAE3B0F,mBAAoB,SAAA1F,GAClBrC,EG1FC,SAA4BqC,GAE/B,MAAO,CACH3B,KAAMnC,EAAYa,qBAClBuB,QAAS0B,GHsFF0F,CAAmB1F,OAKnBF,CAGbuF,GIxFIc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT3I,KAAK,SAAAgJ,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlH,QACf6G,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,gHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BxI,MAAM,SAAA2B,GACLmH,QAAQnH,MAAM,4CAA6CA,0CCnFlDnB,EAXK,WAEN,IAFOgB,EAEP0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAFe,CACzBzH,KAAM,IACP2H,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYW,oBACb,MAAe,CAAEmD,KAAM2H,EAAOrJ,SAClC,QACI,OAAOyB,ICIJ6H,EAXE,WAEH,IAFI7H,EAEJ0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAFY,CACtBzH,KAAM,IACP2H,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYY,kBACb,MAAe,CAAEkD,KAAM2H,EAAOrJ,SAClC,QACI,OAAOyB,ICIJmF,EAXM,WAEP,IAFQnF,EAER0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAFgB,CAC1BzH,KAAM,IACP2H,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYa,qBACb,MAAe,CAAEiD,KAAM2H,EAAOrJ,SAClC,QACI,OAAOyB,ICOJiD,EAdM,WAGP,IAHQjD,EAGR0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAHgB,CAC1BhJ,SAAS,EACTyB,MAAO,IACRyH,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYG,qBACb,MAAe,CAAEoC,QAASkJ,EAAOrJ,SACrC,KAAKpC,EAAYI,oBACb,MAAe,CAAEmC,QAASkJ,EAAOrJ,QAAQG,QAASyB,MAAOyH,EAAOrJ,QAAQE,KAC5E,QACI,OAAOuB,ICIJ0D,EAdM,WAGP,IAHQ1D,EAGR0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAHgB,CAC1BhJ,SAAS,EACTyB,MAAO,IACRyH,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYK,qBACb,MAAe,CAAEkC,QAASkJ,EAAOrJ,SACrC,KAAKpC,EAAYM,oBACb,MAAe,CAAEiC,QAASkJ,EAAOrJ,QAAQG,QAASyB,MAAOyH,EAAOrJ,QAAQE,KAC5E,QACI,OAAOuB,ICIJE,EAdO,WAGR,IAHSF,EAGT0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAHiB,CAC3BhJ,SAAS,EACTyB,MAAO,IACRyH,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYO,sBACb,MAAe,CAAEgC,QAASkJ,EAAOrJ,SACrC,KAAKpC,EAAYQ,qBACb,MAAe,CAAE+B,QAASkJ,EAAOrJ,QAAQG,QAASyB,MAAOyH,EAAOrJ,QAAQE,KAC5E,QACI,OAAOuB,ICIJqF,EAdW,WAGZ,IAHarF,EAGb0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAHqB,CAC/BhJ,SAAS,EACTyB,MAAO,IACRyH,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYS,qBACb,MAAe,CAAE8B,QAASkJ,EAAOrJ,SACrC,KAAKpC,EAAYU,oBACb,MAAe,CAAE6B,QAASkJ,EAAOrJ,QAAQG,QAASyB,MAAOyH,EAAOrJ,QAAQE,KAC5E,QACI,OAAOuB,YCDb8H,EAAc,CAClB9I,cACAqB,YACA8E,eACAlC,eACAS,eACAxD,gBACAmF,oBACA9E,cCjBoB,WAER,IAFSP,EAET0H,UAAA/H,OAAA,QAAAgI,IAAAD,UAAA,GAAAA,UAAA,GAFiB,CAC3BzH,KAAM,IACP2H,EAAWF,UAAA/H,OAAA,EAAA+H,UAAA,QAAAC,EACV,OAAQC,EAAOtJ,MACX,KAAKnC,EAAYc,gBACb,MAAe,CAAEgD,KAAKR,OAAAsI,EAAA,EAAAtI,CAAA,GAAKO,EAAMC,KAAZR,OAAAgD,EAAA,EAAAhD,CAAA,GAAmBmI,EAAOrJ,QAAQU,QAAU2I,EAAOrJ,WAC5E,KAAKpC,EAAYe,eACb,IAAIqC,EAAIqI,EAAOrJ,QACf,MAAe,CAAE0B,KAAKR,OAAAsI,EAAA,EAAAtI,CAAA,GAAKF,IAC/B,KAAKpD,EAAYgB,iBACb,MAAe,CAAE8C,KAAM2H,EAAOrJ,SAClC,QACI,OAAOyB,KDQJgI,cACbC,YAAgBH,GAChB,GACAI,YAAgBC,MEPlBtK,IAASuK,cARI,CACTC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,iBAIvBC,IAASC,OACLtJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CAAUC,MAAOA,GACbxJ,EAAAC,EAAAC,cAACuJ,EAAD,OAEJC,SAASC,eAAe,SVFrB,SAAkBrC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqC,IAAIC,iCAAwB7C,OAAOC,SAAS6C,MACpDC,SAAW/C,OAAOC,SAAS8C,OAIvC,OAGF/C,OAAOgD,iBAAiB,OAAQ,WAC9B,IAAM3C,EAAK,GAAAvI,OAAM+K,iCAAN,sBAEP/C,GAgEV,SAAiCO,EAAOC,GAEtC2C,MAAM5C,GACH3I,KAAK,SAAAwL,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChD,UAAUC,cAAcgD,MAAM9L,KAAK,SAAAgJ,GACjCA,EAAa+C,aAAa/L,KAAK,WAC7BsI,OAAOC,SAASyD,aAKpBtD,EAAgBC,EAAOC,KAG1BpI,MAAM,WACL8I,QAAQC,IACN,mEArFA0C,CAAwBtD,EAAOC,GAI/BC,UAAUC,cAAcgD,MAAM9L,KAAK,WACjCsJ,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,MUpB/BE","file":"static/js/main.2a93e211.chunk.js","sourcesContent":["const ActionTypes = {\r\n    USER_SIGN_IN: \"USER_SIGN_IN\",\r\n    USER_SIGN_OUT: \"USER_SIGN_OUT\",\r\n    USER_SIGN_UP_SUCCESS: \"USER_SIGN_UP_SUCCESS\",\r\n    USER_SIGN_UP_FAILED: \"USER_SIGN_UP_FAILED\",\r\n    USER_SIGN_IN_SUCCESS: \"USER_SIGN_IN_SUCCESS\",\r\n    USER_SIGN_IN_FAILED: \"USER_SIGN_IN_FAILED\",\r\n    USER_SIGN_OUT_SUCCESS: \"USER_SIGN_OUT_SUCCESS\",\r\n    USER_SIGN_OUT_FAILED: \"USER_SIGN_OUT_FAILED\",\r\n    SEND_MESSAGE_SUCCESS: \"SEND_MESSAGE_SUCCESS\",\r\n    SEND_MESSAGE_FAILED: \"SEND_MESSAGE_FAILED\",\r\n    UPDATE_CURRENT_USER: \"UPDATE_CURRENT_USER\",\r\n    UPDATE_USERS_LIST: \"UPDATE_USERS_LIST\",\r\n    UPDATE_MESSAGES_LIST: \"UPDATE_MESSAGES_LIST\",\r\n    INSERT_CHAT_BOX: \"INSERT_CHAT_BOX\",\r\n    CLOSE_CHAT_BOX: \"CLOSE_CHAT_BOX\",\r\n    CLEAR_CHAT_BOXES: \"CLEAR_CHAT_BOXES\",\r\n    SHOW_LOADER: \"SHOW_LOADER\",\r\n    HIDE_LOADER: \"HIDE_LOADER\",\r\n    SHOW_ERROR: \"SHOW_ERROR\",\r\n    HIDE_ERROR: \"HIDE_ERROR\",\r\n    SHOW_CONGRTATS: \"SHOW_CONGRTATS\",\r\n    HIDE_CONGRTATS: \"HIDE_CONGRTATS\"\r\n}\r\n\r\nexport default ActionTypes;","import firebase from \"firebase/app\";\r\n\r\nimport ActionTypes from \"../ActionTypes\";\r\n\r\nexport function signOutUser(id) {\r\n  return dispatch => {\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(_ => {\r\n        firebase\r\n          .database()\r\n          .ref(`users/${id}/isActive`)\r\n          .set(false)\r\n          .then(_ => {\r\n            dispatch(signOutSuccess());\r\n          });\r\n      })\r\n      .catch(err => {\r\n        dispatch(signOutError(err));\r\n      });\r\n  };\r\n}\r\n\r\nfunction signOutSuccess() {\r\n  return {\r\n    type: ActionTypes.USER_SIGN_OUT_SUCCESS,\r\n    payload: true\r\n  };\r\n}\r\n\r\nfunction signOutError(err) {\r\n  return {\r\n    type: ActionTypes.USER_SIGN_OUT_FAILED,\r\n    payload: { success: false, err }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { signOutUser } from \"./../store/actions/userSignOut\";\r\nimport { clearChatBoxes } from \"./../store/actions/clearChatBoxes\";\r\n\r\nclass Header extends Component {\r\n  handleLogOut = () => {\r\n    this.props.signOutUser(this.props.currentUser.userUid);\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps) {\r\n      if (this.props.signOutSuccessStatus) {\r\n        this.props.clearChatBoxes({});\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"headerContainer\">\r\n        <header id=\"header\">\r\n          <div id=\"headerLeft\">\r\n            <h3>BINGO CHAT APP</h3>\r\n          </div>\r\n          {Object.entries(this.props.currentUser).length !== 0 ? (\r\n            <div id=\"headerRight\">\r\n              <h3>{this.props.currentUser.userName}</h3>\r\n              <button onClick={this.handleLogOut}>Log Out</button>\r\n            </div>\r\n          ) : null}\r\n        </header>\r\n\r\n        <hr />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser.data,\r\n    signOutSuccessStatus: state.signOutStatus.success,\r\n    signOutError: state.signOutStatus.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    signOutUser: id => {\r\n      dispatch(signOutUser(id));\r\n    },\r\n    clearChatBoxes: data => {\r\n      dispatch(clearChatBoxes(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Header);\r\n","import ActionTypes from \"../ActionTypes\";\r\n\r\nexport function clearChatBoxes(data) {\r\n  return {\r\n    type: ActionTypes.CLEAR_CHAT_BOXES,\r\n    payload: data\r\n  };\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { insertChatBox } from \"./../store/actions/insertChatBox\";\r\n\r\nconst UsersList = props => {\r\n  let users = [];\r\n\r\n  if (Object.entries(props.currentUser).length !== 0) {\r\n    users = props.users.filter(\r\n      user => user.userUid !== props.currentUser.userUid\r\n    );\r\n  }\r\n\r\n  let handleOpenChat = u => {\r\n    if (!props.chatBoxes.hasOwnProperty(u.userUid)) {\r\n      props.insertChatBox(u);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"users-list-container\">\r\n      <h3 className=\"user-list-head\">Users List</h3>\r\n      <ul className=\"user-list\">\r\n        {users.map(user => {\r\n          return (\r\n            <li key={user.userUid} onClick={() => handleOpenChat(user)}>{`${\r\n              user.userName\r\n            } (${user.isActive ? \"Online\" : \"Offline\"})`}</li>\r\n          );\r\n        })}\r\n      </ul>\r\n      \r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser.data,\r\n    users: state.usersList.data,\r\n    chatBoxes: state.chatBoxesList.data\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    insertChatBox: data => {\r\n      dispatch(insertChatBox(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UsersList);\r\n","import ActionTypes from \"../ActionTypes\";\r\n\r\nexport function insertChatBox(data) {\r\n  return {\r\n    type: ActionTypes.INSERT_CHAT_BOX,\r\n    payload: data\r\n  };\r\n}","import React from \"react\";\r\n\r\nexport const InputField = props => {\r\n  return (\r\n    <input\r\n      type={props.type}\r\n      id={props.id}\r\n      name={props.name}\r\n      value={props.value}\r\n      onChange={e => props.handleOnChange(e)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const InputMessageField = React.forwardRef((props, ref) => {\r\n  return (\r\n    <input\r\n      type={props.type}\r\n      defaultValue={props.defaultValue}\r\n      ref={ref}\r\n      id={props.id}\r\n    />\r\n  );\r\n});\r\n","import firebase from \"firebase/app\";\r\n\r\nimport ActionTypes from \"./../ActionTypes\";\r\n\r\nexport function makeNewUser(name, email, pass) {\r\n  return dispatch => {\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, pass)\r\n      .then(snap => {\r\n        let userUid = snap.user.uid;\r\n        let userName = name;\r\n        let userEmail = snap.user.email;\r\n        let isActive = false;\r\n\r\n        let userData = { userUid, userName, userEmail, isActive };\r\n\r\n        firebase\r\n          .database()\r\n          .ref(`users/${userUid}`)\r\n          .set(userData)\r\n          .then(() => {\r\n            dispatch(signUpSuccess());\r\n          })\r\n          .catch(err => {\r\n            dispatch(signUpError(err));\r\n          });\r\n      })\r\n      .catch(err => {\r\n        dispatch(signUpError(err));\r\n      });\r\n  };\r\n}\r\n\r\nfunction signUpSuccess() {\r\n  return {\r\n    type: ActionTypes.USER_SIGN_UP_SUCCESS,\r\n    payload: true\r\n  };\r\n}\r\n\r\nfunction signUpError(err) {\r\n  return {\r\n    type: ActionTypes.USER_SIGN_UP_FAILED,\r\n    payload: { success: false, err }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {InputField} from \"./../components/inputField\";\r\nimport { makeNewUser } from \"./../store/actions/userSignUp\";\r\n\r\nclass SignUpForm extends Component {\r\n  state = {\r\n    userName: \"\",\r\n    userEmail: \"\",\r\n    userPass: \"\"\r\n  };\r\n\r\n  handleChange = ev => {\r\n    this.setState({\r\n      [ev.target.name]: ev.target.value\r\n    });\r\n  };\r\n\r\n  handleSignUp = ev => {\r\n    ev.preventDefault();\r\n\r\n    this.props.makeNewUser(\r\n      this.state.userName,\r\n      this.state.userEmail,\r\n      this.state.userPass\r\n    );\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps) {\r\n      if (this.props.signUpSuccessStatus) {\r\n        this.setState({\r\n          userName: \"\",\r\n          userEmail: \"\",\r\n          userPass: \"\"\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"sign-up-form\">\r\n        <h3>Sign Up Form</h3>\r\n        <form id=\"sign-up-form\" onSubmit={this.handleSignUp}>\r\n          <label htmlFor=\"userName\">Name: </label>\r\n          <InputField\r\n            type=\"text\"\r\n            id=\"userName\"\r\n            name=\"userName\"\r\n            value={this.state.userName}\r\n            handleOnChange={this.handleChange}\r\n          />\r\n\r\n          <br />\r\n\r\n          <label htmlFor=\"userEmail\">Email: </label>\r\n          <InputField\r\n            type=\"text\"\r\n            id=\"userEmail\"\r\n            name=\"userEmail\"\r\n            value={this.state.userEmail}\r\n            handleOnChange={this.handleChange}\r\n          />\r\n\r\n          <br />\r\n\r\n          <label htmlFor=\"userPass\">Password: </label>\r\n          <InputField\r\n            type=\"password\"\r\n            id=\"userPass\"\r\n            name=\"userPass\"\r\n            value={this.state.userPass}\r\n            handleOnChange={this.handleChange}\r\n          />\r\n\r\n          <button type=\"submit\" className=\"submit-btn\">\r\n            Sign Up\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    signUpSuccessStatus: state.signUpStatus.success,\r\n    signUpError: state.signUpStatus.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    makeNewUser: (name, email, pass) => {\r\n      dispatch(makeNewUser(name, email, pass));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SignUpForm);\r\n","import firebase from \"firebase/app\";\r\n\r\nimport ActionTypes from \"../ActionTypes\";\r\n\r\nexport function signInUser(email, pass) {\r\n  return dispatch => {\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, pass)\r\n      .then( _ => {\r\n        dispatch(signInSuccess());\r\n      })\r\n      .catch(err => {\r\n        dispatch(signInError(err));\r\n      });\r\n  };\r\n}\r\n\r\nfunction signInSuccess() {\r\n  return {\r\n    type: ActionTypes.USER_SIGN_IN_SUCCESS,\r\n    payload: true\r\n  };\r\n}\r\n\r\nfunction signInError(err) {\r\n  return {\r\n    type: ActionTypes.USER_SIGN_IN_FAILED,\r\n    payload: { success: false, err }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {InputField} from \"./../components/inputField\";\r\nimport { signInUser } from \"./../store/actions/userSignIn\";\r\n\r\nclass SignInForm extends Component {\r\n  state = {\r\n    userSignInEmail: \"\",\r\n    userSignInPass: \"\"\r\n  };\r\n\r\n  handleChange = ev => {\r\n    this.setState({\r\n      [ev.target.name]: ev.target.value\r\n    });\r\n  };\r\n\r\n  handleSignIn = ev => {\r\n    ev.preventDefault();\r\n\r\n    this.props.signInUser(\r\n      this.state.userSignInEmail,\r\n      this.state.userSignInPass\r\n    );\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps) {\r\n      if (this.props.signInSuccessStatus) {\r\n        this.setState({\r\n          userSignInEmail: \"\",\r\n          userSignInPass: \"\"\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"sign-in-form\">\r\n        <h3>Sign In Form</h3>\r\n        <form id=\"sign-in-form\" onSubmit={this.handleSignIn}>\r\n          <label htmlFor=\"userSignInEmail\">Email: </label>\r\n          <InputField\r\n            type=\"text\"\r\n            id=\"userSignInEmail\"\r\n            name=\"userSignInEmail\"\r\n            value={this.state.userSignInEmail}\r\n            handleOnChange={this.handleChange}\r\n          />\r\n\r\n          <br />\r\n\r\n          <label htmlFor=\"userSignInPass\">Password: </label>\r\n          <InputField\r\n            type=\"password\"\r\n            id=\"userSignInPass\"\r\n            name=\"userSignInPass\"\r\n            value={this.state.userSignInPass}\r\n            handleOnChange={this.handleChange}\r\n          />\r\n\r\n          <button type=\"submit\" className=\"submit-btn\">\r\n            Sign In\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    signInSuccessStatus: state.signInStatus.success,\r\n    signInError: state.signInStatus.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    signInUser: (email, pass) => {\r\n      dispatch(signInUser(email, pass));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SignInForm);\r\n","import firebase from \"firebase/app\";\r\n\r\nimport ActionTypes from \"../ActionTypes\";\r\n\r\nexport function sendMessage(data) {\r\n  return dispatch => {\r\n    firebase\r\n      .database()\r\n      .ref(\"messages\")\r\n      .push(data)\r\n      .then(_ => {\r\n        dispatch(sendMessageSuccess());\r\n      })\r\n      .catch(err => {\r\n        dispatch(sendMessageError(err));\r\n      });\r\n  };\r\n}\r\n\r\nfunction sendMessageSuccess() {\r\n  return {\r\n    type: ActionTypes.SEND_MESSAGE_SUCCESS,\r\n    payload: true\r\n  };\r\n}\r\n\r\nfunction sendMessageError(err) {\r\n  return {\r\n    type: ActionTypes.SEND_MESSAGE_FAILED,\r\n    payload: { success: false, err }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { InputMessageField } from \"./inputField\";\r\nimport { sendMessage } from \"./../store/actions/sendMessage\";\r\nimport { closeChatBox } from \"./../store/actions/closeChatBox\";\r\n\r\nclass ChatBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.textInput = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps) {\r\n      if (this.props.sendMessageSuccessStatus) {\r\n        this.textInput.current.value = \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSubmit = (data, ev) => {\r\n    ev.preventDefault();\r\n\r\n    let message = this.textInput.current.value;\r\n\r\n    if (message !== \"\") {\r\n      let details = {\r\n        senderId: this.props.currentUser.userUid,\r\n        receiverId: data.userUid,\r\n        message,\r\n        senderName: this.props.currentUser.userName\r\n      };\r\n\r\n      this.props.sendMessage(details);\r\n    }\r\n  };\r\n\r\n  handleChatBoxClose = id => {\r\n    let list = this.props.chatBoxes;\r\n    delete list[id.userUid];\r\n\r\n    this.props.closeChatBox(list);\r\n  };\r\n\r\n  render() {\r\n\r\n    let { messages, data } = this.props;\r\n\r\n    let messagesList = messages.filter(\r\n      message =>\r\n        (message.senderId === data.userUid &&\r\n          message.receiverId === this.props.currentUser.userUid) ||\r\n        (message.senderId === this.props.currentUser.userUid &&\r\n          message.receiverId === data.userUid)\r\n    );\r\n\r\n    return (\r\n      <div id=\"chatbox\" key={this.props.key}>\r\n        <h3>Chat started with: {data.userName}</h3>\r\n\r\n        <hr />\r\n\r\n        <form onSubmit={ev => this.handleSubmit(data, ev)}>\r\n          <label htmlFor=\"messageInput\">Message: </label>\r\n          <InputMessageField\r\n            type=\"text\"\r\n            defaultValue=\"\"\r\n            ref={this.textInput}\r\n            id={`messageInput${data.userUid}`}\r\n          />\r\n\r\n          <button type=\"submit\">Send</button>\r\n        </form>\r\n\r\n        <h4>Messages:</h4>\r\n\r\n        <div>\r\n          <ul>\r\n            {messagesList.map((message, i) => {\r\n              return (\r\n                <li key={i}>{`${message.message} <== ${\r\n                  message.senderName === this.props.currentUser.userName\r\n                    ? \"You\"\r\n                    : message.senderName\r\n                }`}</li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n\r\n        <button onClick={() => this.handleChatBoxClose(data)}>\r\n          Close Chat Box\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser.data,\r\n    messages: state.messagesList.data,\r\n    sendMessageSuccessStatus: state.sendMessageStatus.success,\r\n    sendMessageError: state.sendMessageStatus.error,\r\n    chatBoxes: state.chatBoxesList.data\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    sendMessage: data => {\r\n      dispatch(sendMessage(data));\r\n    },\r\n    closeChatBox: data => {\r\n      dispatch(closeChatBox(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatBox);\r\n","import ActionTypes from \"../ActionTypes\";\r\n\r\nexport function closeChatBox(id) {\r\n  return {\r\n    type: ActionTypes.CLOSE_CHAT_BOX,\r\n    payload: id\r\n  };\r\n}","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport firebase from \"firebase/app\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateCurrentUser } from \"./store/actions/updateCurrentUser\";\r\nimport { updateUsersList } from \"./store/actions/updateUsersList\";\r\nimport { updateMessagesList } from \"./store/actions/updateMessagesList\";\r\nimport Header from \"./components/header\";\r\nimport UsersList from \"./components/usersList\";\r\nimport SignUpForm from \"./containers/signUpForm\";\r\nimport SignInForm from \"./containers/signInForm\";\r\nimport ChatBox from \"./components/chatBox\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    firebase\r\n      .database()\r\n      .ref(\"/\")\r\n      .on(\"value\", snap => {\r\n        let data = snap.val() === null ? {} : snap.val();\r\n\r\n        let users = data.users ? Object.values(data.users) : [];\r\n        let messages = data.messages ? Object.values(data.messages) : [];\r\n        this.props.updateUsersList(users);\r\n        this.props.updateMessagesList(messages);\r\n\r\n        firebase.auth().onAuthStateChanged(user => {\r\n          if (user) {\r\n            firebase\r\n              .database()\r\n              .ref(`users/${user.uid}/isActive`)\r\n              .set(true)\r\n              .then(() => {\r\n                let currentUser = this.props.users.filter(\r\n                  x => x.userUid === user.uid\r\n                );\r\n                this.props.updateCurrentUser(currentUser[0]);\r\n              });\r\n          } else {\r\n            this.props.updateCurrentUser({});\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n\r\n        {Object.entries(this.props.currentUser).length === 0 ? (\r\n          <div id=\"forms-container\">\r\n            <SignUpForm />\r\n\r\n            <hr />\r\n\r\n            <SignInForm />\r\n\r\n          </div>\r\n        ) : null}\r\n\r\n        {Object.entries(this.props.currentUser).length !== 0 ? (\r\n          <UsersList />\r\n        ) : null}\r\n\r\n        <div className=\"chatbox-container\">\r\n          {Object.values(this.props.chatBoxes).map(chatBox => (\r\n            <ChatBox data={chatBox} key={chatBox.userUid} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser.data,\r\n    users: state.usersList.data,\r\n    chatBoxes: state.chatBoxesList.data\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateCurrentUser: data => {\r\n      dispatch(updateCurrentUser(data));\r\n    },\r\n    updateUsersList: data => {\r\n      dispatch(updateUsersList(data));\r\n    },\r\n    updateMessagesList: data => {\r\n      dispatch(updateMessagesList(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import ActionTypes from \"./../ActionTypes\"\r\n\r\nexport function updateCurrentUser(data) {\r\n    \r\n    return {\r\n        type: ActionTypes.UPDATE_CURRENT_USER,\r\n        payload: data\r\n    }\r\n}\r\n","import ActionTypes from \"./../ActionTypes\"\r\n\r\nexport function updateUsersList(data) {\r\n    \r\n    return {\r\n        type: ActionTypes.UPDATE_USERS_LIST,\r\n        payload: data\r\n    }\r\n}\r\n","import ActionTypes from \"./../ActionTypes\"\r\n\r\nexport function updateMessagesList(data) {\r\n    \r\n    return {\r\n        type: ActionTypes.UPDATE_MESSAGES_LIST,\r\n        payload: data\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst currentUser = (state = {\r\n    data: {}\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.UPDATE_CURRENT_USER:\r\n            return state = { data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default currentUser;","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst userList = (state = {\r\n    data: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.UPDATE_USERS_LIST:\r\n            return state = { data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userList;","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst messagesList = (state = {\r\n    data: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.UPDATE_MESSAGES_LIST:\r\n            return state = { data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default messagesList;","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst signUpStatus = (state = {\r\n    success: false,\r\n    error: \"\"\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.USER_SIGN_UP_SUCCESS:\r\n            return state = { success: action.payload };\r\n        case ActionTypes.USER_SIGN_UP_FAILED:\r\n            return state = { success: action.payload.success, error: action.payload.err };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default signUpStatus;","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst signInStatus = (state = {\r\n    success: false,\r\n    error: \"\"\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.USER_SIGN_IN_SUCCESS:\r\n            return state = { success: action.payload };\r\n        case ActionTypes.USER_SIGN_IN_FAILED:\r\n            return state = { success: action.payload.success, error: action.payload.err };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default signInStatus;","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst signOutStatus = (state = {\r\n    success: false,\r\n    error: \"\"\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.USER_SIGN_OUT_SUCCESS:\r\n            return state = { success: action.payload };\r\n        case ActionTypes.USER_SIGN_OUT_FAILED:\r\n            return state = { success: action.payload.success, error: action.payload.err };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default signOutStatus;","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst sendMessageStatus = (state = {\r\n    success: false,\r\n    error: \"\"\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SEND_MESSAGE_SUCCESS:\r\n            return state = { success: action.payload };\r\n        case ActionTypes.SEND_MESSAGE_FAILED:\r\n            return state = { success: action.payload.success, error: action.payload.err };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sendMessageStatus;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport currentUser from \"./reducers/currentUser\";\r\nimport usersList from \"./reducers/usersList\";\r\nimport messagesList from \"./reducers/messagesList\";\r\nimport signUpStatus from \"./reducers/signUpStatus\";\r\nimport signInStatus from \"./reducers/signInStatus\";\r\nimport signOutStatus from \"./reducers/signOutStatus\";\r\nimport sendMessageStatus from \"./reducers/sendMessageStatus\";\r\nimport chatBoxesList from \"./reducers/chatBoxesList\";\r\n\r\nconst AllReducers = {\r\n  currentUser,\r\n  usersList,\r\n  messagesList,\r\n  signUpStatus,\r\n  signInStatus,\r\n  signOutStatus,\r\n  sendMessageStatus,\r\n  chatBoxesList\r\n};\r\n\r\nexport default createStore(\r\n  combineReducers(AllReducers),\r\n  {},\r\n  applyMiddleware(thunk)\r\n);\r\n","import ActionTypes from \"../ActionTypes\"\r\n\r\nconst chatBoxesList = (state = {\r\n    data: {}\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.INSERT_CHAT_BOX:\r\n            return state = { data: {...state.data, [action.payload.userUid]: action.payload} };\r\n        case ActionTypes.CLOSE_CHAT_BOX:\r\n            let a = action.payload;\r\n            return state = { data: {...a}};\r\n        case ActionTypes.CLEAR_CHAT_BOXES:\r\n            return state = { data: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default chatBoxesList;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport firebase from 'firebase';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\n// Initialize Firebase\r\nvar config = {\r\n    apiKey: \"AIzaSyAv71-5itSOzD_bYlMA7am1tK5PW2hmIVs\",\r\n    authDomain: \"amlakhani-chatapp.firebaseapp.com\",\r\n    databaseURL: \"https://amlakhani-chatapp.firebaseio.com\",\r\n    projectId: \"amlakhani-chatapp\",\r\n    storageBucket: \"amlakhani-chatapp.appspot.com\",\r\n    messagingSenderId: \"451241892358\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}